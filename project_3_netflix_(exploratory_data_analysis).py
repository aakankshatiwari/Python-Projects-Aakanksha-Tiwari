# -*- coding: utf-8 -*-
"""Project 3: Netflix (Exploratory Data Analysis)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AHm1OT5a2s0KjC4zDOc6JpmWQmgyw-Ls
"""

# Commented out IPython magic to ensure Python compatibility.
# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
import re
import plotly.express as px
import plotly.graph_objs as go
import plotly.figure_factory as ff

warnings.filterwarnings ('ignore')
# %matplotlib inline

# Step 1: Data Collection
# Load and read dataset
path="/content/sample_data/netflix_data.csv"
df=pd.read_csv(path)
df.head(5)

# Step 2: Inspecting dataset

df.head()

df.tail()

df.shape

df.columns

df.info()

df.describe()

#Step 3: Inspecting missing values in the dataset

df.isnull().sum().sort_values(ascending=False)

round(df.isnull().sum()/df.shape[0]*100,2).sort_values(ascending=False)

df['director'].value_counts()

# Step 4: Movies Vs TV Shows

#Checking Gender Imbalance
go.Figure(data=[go.Pie(labels=df.type.value_counts(normalize=True).index,
                       values=df.type.value_counts(normalize=True).values, hole=.5,
                       title='Movies Vs TV Shows')])

df.type.value_counts()

df.country.value_counts()

df.country.value_counts().head(8)

#Year wise count

plt.figure(figsize=(12, 10))

ax = sns.countplot(y="release_year", data=df, order=df['release_year'].value_counts().index[:15])

ax.set_xlabel("Count")
ax.set_ylabel("Release Year")
ax.set_title("Top 15 Most Common Release Years")

plt.show()

#Top 10 directors

df.director.value_counts().head(10)

#Top 10 genres

df.genre.value_counts().head(10)

plt.figure(figsize=(12, 10))

ax = sns.countplot(y="genre", data=df, order=df['genre'].value_counts().index[:10])

plt.show()

df['title']

movies_df=df.loc[(df['type']=='Movie')]
movies_df.head(2)

show_df=df.loc[(df['type']=='TV Show')]
show_df.head(2)

movies_df['duration'] = movies_df['duration'].astype(str)

movies_df['duration'] = movies_df['duration'].apply(lambda x: x.replace("min", "") if 'min' in x else x)

print(movies_df.head(2))

movies_df.info()

movies_df.loc[:,["duration"]] = movies_df.loc[:,["duration"]].apply(lambda x: x.astype('int64',errors='ignore') if 'min' in x else x)
movies_df.describe()

#Shortest Movie
shortest_movie=movies_df.loc[(movies_df["duration"] ==np.min(movies_df.duration))]
movies_df.describe()

#Longest Movie
longest_movie=movies_df.loc[(movies_df["duration"] ==np.max(movies_df.duration))]
movies_df.describe()

show_df.duration.value_counts().tail(10)

# Create a heatmap using seaborn

data = {
    'Date': pd.date_range(start='2008-01-01', end='2021-12-31', freq='D'),
    'Duration': [10, 20, 30, 40, 50] * 73  # Dummy views data
}

df['date_added'] = pd.to_datetime(df['date_added'])

df['Year'] = df['date_added'].dt.year
df['Month'] = df['date_added'].dt.month

heatmap_data = df.pivot_table(index='Month', columns='Year', values='duration', aggfunc='sum')

plt.figure(figsize=(10, 7),dpi=200)
sns.heatmap(heatmap_data, cmap='viridis',edgecolors='white', linewidths=2)

plt.title('Netflix Duration Heatmap')
plt.xlabel('Year')
plt.ylabel('Month')
plt.show()

