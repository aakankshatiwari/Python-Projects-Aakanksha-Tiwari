# -*- coding: utf-8 -*-
"""Project 2 â€“ Exploratory Analysis of Geolocational Data

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r3-dDuLbzqkdP_zroHWKjwVG3k1hH5X_
"""

# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
import folium
import requests
import random

# Step 1: Data Collection
# Load and read dataset
path="/content/drive/MyDrive/food_coded.csv"
df=pd.read_csv(path)
df.head(5)

# Step 2: Data Cleaning

# Handle missing values
df.dropna(inplace=True)

# Remove duplicates
df.drop_duplicates(inplace=True)

# Verify the cleaned dataset
print(df.head(5))

print(df.columns)

# Step 3: Visualize multiple data using single boxplot

# Combine multiple columns into a single DataFrame
data_to_visualize = pd.concat([df['cook'], df['eating_out'], df['employment'], df['ethnic_food'], df['exercise'], df['fruit_day'], df['income'], df['on_off_campus'], df['pay_meal_out'], df['sports'], df['veggies_day']], axis=1)

# Create boxplot using Seaborn
plt.figure(figsize=(10, 6))
sns.boxplot(data=data_to_visualize)
plt.title('Boxplot of Multiple Variables')
plt.xlabel('Variables')
plt.ylabel('Values')

# Rotate x-axis labels for better readability
plt.xticks(rotation=45)
plt.show()

# Step 4: K-Means Clustering

from sklearn.impute import SimpleImputer
from sklearn.cluster import KMeans

# Initialize SimpleImputer to impute missing values with mean
imputer = SimpleImputer(strategy='mean')

# Impute missing values in the DataFrame
data_to_visualize_imputed = imputer.fit_transform(data_to_visualize)

# Choose the number of clusters (K)
k = 3

# Initialize KMeans model
kmeans = KMeans(n_clusters=3, n_init=10)  # Set n_init to 10 explicitly


# Fit the model to the imputed data
kmeans.fit(data_to_visualize_imputed)

# Get cluster labels for each data point
cluster_labels = kmeans.labels_

# Add cluster labels to the DataFrame
df['Cluster'] = cluster_labels

# Step 5: Fetch Geolocational Data from Foursquare API

# Define Foursquare credentials
CLIENT_ID = 'O0KWYP352UKCIJKBKQO4UYCFBW0OX1Z43Z3VGZXYYV2LSH3Q'
CLIENT_SECRET = 'FUFLN1LZ0IIWJLUSTP3LRTSY0BAJAOWRYHMH3QZSZ3GI5SAO'
VERSION = '20240331'

print('Your credentails:')
print('CLIENT_ID: ' + CLIENT_ID)
print('CLIENT_SECRET:' + CLIENT_SECRET)

# Define function to fetch nearby venues using Foursquare API
def fetch_nearby_venues(latitude, longitude, radius=500, limit=100):
    # Set up the query parameters
    params = {
        'client_id': CLIENT_ID,
        'client_secret': CLIENT_SECRET,
        'v': VERSION,
        'll': f'{latitude},{longitude}',
        'radius': radius,
        'limit': limit
    }

# Make the API request
    response = requests.get('https://api.foursquare.com/v3/places/search', params=params)
    data = response.json()

    # Extract and process the results
    nearby_venues = []
    if 'response' in data and 'groups' in data['response']:
        items = data['response']['groups'][0]['items']
        for item in items:
            venue = item['venue']
            venue_name = venue['name']
            venue_category = venue['categories'][0]['name']
            venue_lat = venue['location']['lat']
            venue_lng = venue['location']['lng']
            nearby_venues.append((venue_name, venue_category, venue_lat, venue_lng))

    return nearby_venues

    # Example coordinates for Bengaluru
latitude = 12.9716
longitude = 77.5946

# Fetch nearby venues in Bengaluru
bengaluru_venues = fetch_nearby_venues(latitude, longitude)

# Print the nearby venues
for venue in bengaluru_venues:
    print(venue)

# Step 6: Plot Results on a Map

# Initialize map centered at Bengaluru
bengaluru_map = folium.Map(location=[12.9716, 77.5946], zoom_start=12)

# List of venues with specific names and locations
specific_venues = [
    {"name": "Richards Town", "location": [13.0051, 77.6266]},
    {"name": "CV Raman Nagar", "location": [12.9796, 77.6649]},
    {"name": "Ganga Nagar", "location": [13.0275, 77.5760]},
    {"name": "Shanti Nagar", "location": [12.9575, 77.5970]},
    {"name": "Willson Garden", "location": [12.9488, 77.6022]}
]

# Add markers for each venue
for venue in bengaluru_venues:
    name, category, lat, lng = venue
    folium.Marker([lat, lng], popup=name).add_to(bengaluru_map)

# Add markers for specific locations
for specific_venue in specific_venues:
    name = specific_venue["name"]
    location = specific_venue["location"]
    folium.Marker(location, popup=name, icon=folium.Icon(color='green')).add_to(bengaluru_map)

# Display the map
bengaluru_map